{"title":"Lua语言基础2","date":"2021-01-26T12:59:58.000Z","date_formatted":{"ll":"2021年1月26日","L":"2021/01/26","MM-DD":"01-26"},"link":"2021/01/26/Lua语言基础2","comments":true,"tags":["Lua"],"updated":"2021-01-26T05:01:38.851Z","content":"<a id=\"more\"></a>\n\n<h2 id=\"一、基本类型\">一、基本类型<a href=\"#一、基本类型\" title=\"一、基本类型\"></a></h2><p>lua总共有8种基本类型：nil（空）、boolean（布尔）、number（数值）、string（字符串）、userdata（用户数据）、function（函数）、thread（线程） 和 table（表）。type返回的参数是string类型。最主要的一个例子为：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; type(nil)==nil</span><br><span class=\"line\">false</span><br><span class=\"line\">&gt; type(nil)==\"nil\"</span><br><span class=\"line\">true</span><br></pre></td></tr></tbody></table></figure>\n\n<p>type（nil）返回的是字符串类型“nil”，所以输出为false。</p>\n<h2 id=\"二、nil\">二、nil<a href=\"#二、nil\" title=\"二、nil\"></a></h2><p>nil 类型表示一种无效值，主要作用为与其他值有所区分。</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; print(type(a))</span><br><span class=\"line\">nil</span><br></pre></td></tr></tbody></table></figure>\n\n<p>对于全局变量和 table，nil 还有一个”删除”作用，给全局变量或者 table 表里的变量赋一个 nil 值，等同于把它们删掉：</p>\n<p><strong><code>对于table</code></strong></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tab1 = { key1 = <span class=\"string\">\"val1\"</span>, key2 = <span class=\"string\">\"val2\"</span>, <span class=\"string\">\"val3\"</span> }</span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab1) <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(k .. <span class=\"string\">\" - \"</span> .. v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\" ---------------- \"</span> )</span><br><span class=\"line\">tab1.key1 = <span class=\"literal\">nil</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> <span class=\"built_in\">pairs</span>(tab1) <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(k .. <span class=\"string\">\" - \"</span> .. v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">--[[输出：</span></span><br><span class=\"line\"><span class=\"comment\">1 - val3</span></span><br><span class=\"line\"><span class=\"comment\">key2 - val2</span></span><br><span class=\"line\"><span class=\"comment\">key1 - val1</span></span><br><span class=\"line\"><span class=\"comment\"> ---------------- </span></span><br><span class=\"line\"><span class=\"comment\">1 - val3</span></span><br><span class=\"line\"><span class=\"comment\">key2 - val2</span></span><br><span class=\"line\"><span class=\"comment\">--]]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>对于全局变量</code></strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x == nil     --&gt; true</span><br><span class=\"line\">x == \"nil\"   --&gt; false</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"三、boolean\">三、Boolean<a href=\"#三、boolean\" title=\"三、Boolean\"></a></h2><p>boolean 类型只有两个可选值：true（真） 和 false（假），Lua 把 false 和 nil 看作是 false，其他的都为 true。注意，在Lua中，任何值都可以表现条件，在条件检测中，空字符串和零也为真。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">true</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">false</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(<span class=\"literal\">nil</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">false</span> <span class=\"keyword\">or</span> <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"至少有一个是 true\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"false 和 nil 都为 false\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"数字 0 是 true\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">\"数字 0 为 false\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>以上代码执行结果如下：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean</span><br><span class=\"line\">boolean</span><br><span class=\"line\">nil</span><br><span class=\"line\">false 和 nil 都为 false</span><br><span class=\"line\">数字 0 是 true</span><br></pre></td></tr></tbody></table></figure>\n\n<p>不同于 C/C++，在 Lua 中对 0(number) 进行逻辑判断，得到的结果也是 <strong>true</strong>。</p>\n<p>Boolean在逻辑运算中的运用也十分重要。Lua的逻辑运算符为：and（与）、or（或），not（非）。</p>\n<p><strong><code>逻辑运算符与and的运算结果</code></strong></p>\n<p>​    若第一个操作数为false，则返回第一个操作数，否则返回第二个。</p>\n<p><strong><code>逻辑运算符或or的运算结果</code></strong></p>\n<p>​    若第一个操作数为false，则返回第二个操作数，否则返回第一个。</p>\n<p><strong><code>速记口诀</code></strong></p>\n<p>​    and假一，or假二。</p>\n<p><strong><code>例程</code></strong></p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 and 5        --&gt; 5  </span><br><span class=\"line\">nil and 13     --&gt; nil</span><br><span class=\"line\">false and 13   --&gt; false</span><br><span class=\"line\">0 or 5         --&gt; 0</span><br><span class=\"line\">false or \"hi\"  --&gt; hi</span><br><span class=\"line\">nil or false   --&gt; false</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>and和or的短路求值原则</code></strong></p>\n<p>​    短路求值原则即在有必要的时候求第二个操作数进行求值。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; i=<span class=\"number\">0</span></span><br><span class=\"line\">&gt; i~=<span class=\"number\">0</span> <span class=\"keyword\">and</span> a/i&gt;<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>​    第一个操作数不满足且为与操作，因此直接就返回第一个操作数的结果false。</p>\n<p><strong><code>x= x or v 的惯用写法等价于</code></strong></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> x <span class=\"keyword\">then</span> x=v <span class=\"keyword\">end</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>三目运算a ? b : c</code></strong></p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> a, b, ret;</span><br><span class=\"line\">ret = a &gt; b <span class=\"keyword\">and</span> a <span class=\"keyword\">or</span> b</span><br></pre></td></tr></tbody></table></figure>\n\n<p>上诉三目运算没有问题，但是按一般的形式：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a <span class=\"keyword\">and</span> b <span class=\"keyword\">or</span> c</span><br></pre></td></tr></tbody></table></figure>\n\n<p>当a=true，b=false时，返回值就不在是b，而是c。这并不是我们所认识的正确值，所以这个一般形式的三目运算也是有他的坑，要注意使用时候要主要这个点。</p>\n<h2 id=\"四、number（数值）\">四、number（数值）<a href=\"#四、number（数值）\" title=\"四、number（数值）\"></a></h2><h2 id=\"五、string（字符串）\">五、string（字符串）<a href=\"#五、string（字符串）\" title=\"五、string（字符串）\"></a></h2><p>字符串是由数字、字母、下划线组成的一串字符。有三种表示方式：</p>\n<p>1.双引号：”string1”</p>\n<p>2.单引号：‘string1’</p>\n<p>3.双个中括号：[[string1]]</p>\n<p><strong>字符串相关函数：</strong></p>\n<p><strong><code>string.upper(arg)</code></strong>:字符串转化为大写字母</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; data=<span class=\"string\">'string'</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">upper</span>(data)</span><br><span class=\"line\">STRING</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.lower(arg)</code></strong>:字符串转化为小写字母</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; data=<span class=\"string\">'STRING'</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">lower</span>(data)</span><br><span class=\"line\"><span class=\"built_in\">string</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.reverse(arg)</code></strong>:字符串反转，倒着输出</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">reverse</span>(<span class=\"string\">'string'</span>)</span><br><span class=\"line\">gnirts</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.len(arg)</code></strong>:求字符串长度（空格也算）。空串 <code>\"\"</code> 的长度为 0</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(<span class=\"string\">'string'</span>)</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(<span class=\"string\">'string '</span>)</span><br><span class=\"line\"><span class=\"number\">7</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(<span class=\"string\">'a\\000bc\\000'</span>)  <span class=\"comment\">-- 内嵌零也统计在内</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.rep(string，n[, sep])</code></strong>:返回string的n个拼接，若sep不为空，则n 个字符串 string 以字符串 sep 为分割符连在一起的字符串。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">'string '</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">string</span> <span class=\"built_in\">string</span> <span class=\"built_in\">string</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">'string'</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">stringstringstring</span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">rep</span>(<span class=\"string\">'string'</span>,<span class=\"number\">3</span>,<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">stringastringastring</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.sub(Str,from[，to])</code></strong>:截取下字符串Str从from到to,如果没有to参数，则默认to=-1。</p>\n<p>返回值：截取得到的字符串</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; data=<span class=\"string\">'i can can then can'</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">sub</span>(data,<span class=\"number\">1</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">i can</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.gsub(mainString,findString,replaceString[,num])</code></strong>:将mainString中的findString替换成replaceString，替换num次。num若没有写，则全部替换。</p>\n<p>两个返回值：</p>\n<p>第一个返回值：替换后的字符串</p>\n<p>第二个返回值：替换次数</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; data=<span class=\"string\">'i can can then can'</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(data,<span class=\"string\">'c'</span>,<span class=\"string\">'k'</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">i kan kan <span class=\"keyword\">then</span> can      <span class=\"number\">2</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(data,<span class=\"string\">'a'</span>,<span class=\"string\">'i'</span>)</span><br><span class=\"line\">i cin cin <span class=\"keyword\">then</span> cin      <span class=\"number\">3</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>TODO：</p>\n<p><strong><code>string.find (str, substr, [init, [end]])</code></strong>:在字符串str中寻找是否存在substr子字符串，init是起始位置，第四个参数  <strong>true</strong> 时， 关闭模式匹配机制。 int和end都是可选参数。不存在返回nil，存在返回两个返回值。</p>\n<p>两个返回值：</p>\n<p>第一个返回值：存在子字符串的起始位置</p>\n<p>第二个返回值：存在子字符串的终止位置</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; data=<span class=\"string\">'i can can then can'</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(data,<span class=\"string\">'can'</span>)</span><br><span class=\"line\"><span class=\"number\">3</span>       <span class=\"number\">5</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">find</span>(data,<span class=\"string\">'can'</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"number\">7</span>       <span class=\"number\">9</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.format(...)</code></strong>:格式化字符串，类似printf函数</p>\n<p>返回值：格式化后的字符串</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"the value is:%d\"</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\">the value is:<span class=\"number\">4</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>UDP/TCP传输数据的时候需要将数据转成字节数组，stringdump函数将string或者table格式的数据一行16个数据打印出来，如打印例子：</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------------------------------------------------------------</span><br><span class=\"line\">00000001 - ff aa 2a 10 00 10 8e 7b 22 63 6d 64 22 3a 22 30  ..*....{\"cmd\":\"0</span><br><span class=\"line\">00000011 - 30 31 32 31 30 30 30 32 30 30 30 30 30 30 30 5f  012100020000000_</span><br><span class=\"line\">00000021 - 54 58 22 2c 22 67 22 3a 22 30 30 30 30 30 30 30  TX\",\"g\":\"0000000</span><br><span class=\"line\">00000031 - 34 39 41 38 33 31 33 30 2d 33 31 33 30 22 2c 22  49A83130-3130\",\"</span><br><span class=\"line\">00000041 - 64 61 74 61 22 3a 7b 22 67 70 73 30 3a 31 2c 22  data\":{\"gp0\":1,\"</span><br><span class=\"line\">00000051 - 66 72 65 65 73 70 61 63 65 22 3a 22 31 2e 33 4d  freespace\":\"1.3M</span><br><span class=\"line\">00000081 - 37 33 22 2c 22 76 6f 6c 74 61 67 65 22 3a 22 33  73\",\"voltage\":\"3</span><br><span class=\"line\">00000091 - 2e 37 22 7d 7d d4 a3                             .7\"}}..</span><br><span class=\"line\">----------------------------------------------------------------------------</span><br></pre></td></tr></tbody></table></figure>\n\n<p>以上输出的代码为：</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringdump</span><span class=\"params\">( arg )</span></span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> <span class=\"built_in\">dump</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(<span class=\"built_in\">arg</span>) == <span class=\"string\">'string'</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tclog.info(<span class=\"string\">\"dump type string.\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">dump</span> = { <span class=\"built_in\">arg</span>:<span class=\"built_in\">byte</span>(<span class=\"number\">1</span>,<span class=\"number\">-1</span>) }</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tclog.info(<span class=\"string\">\"dump type arg.\"</span>)</span><br><span class=\"line\">        <span class=\"built_in\">dump</span> = <span class=\"built_in\">arg</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">local</span> binstr = <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">local</span> addr = <span class=\"number\">0x00</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">arg</span> == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">\t\tclog.<span class=\"built_in\">error</span>(<span class=\"string\">\"Try to dump nil data.\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'-----------------------------------------------------------------------'</span>)</span><br><span class=\"line\">\t</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span>,#<span class=\"built_in\">dump</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">0</span> == ((i<span class=\"number\">-1</span>)%<span class=\"number\">16</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"comment\">-- 打印序号</span></span><br><span class=\"line\">            binstr = <span class=\"string\">\"\"</span> .. <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>( <span class=\"string\">\"%08x -\"</span>,i + addr )</span><br><span class=\"line\">            binstr = binstr .. <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>( <span class=\"string\">\" %02x\"</span>, <span class=\"built_in\">dump</span>[i] )</span><br><span class=\"line\">        <span class=\"keyword\">elseif</span> (<span class=\"number\">15</span> == ((i<span class=\"number\">-1</span>) % <span class=\"number\">16</span>)) <span class=\"keyword\">then</span></span><br><span class=\"line\">            binstr = binstr .. <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>( <span class=\"string\">\" %02x\"</span>, <span class=\"built_in\">dump</span>[i] )</span><br><span class=\"line\">            binstr = binstr .. <span class=\"string\">\"  \"</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j=i<span class=\"number\">-15</span>, i <span class=\"keyword\">do</span></span><br><span class=\"line\">                <span class=\"comment\">-- 打印不出来、显示不出来的字符用.代替</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"number\">0x20</span> &lt;= <span class=\"built_in\">dump</span>[j]) <span class=\"keyword\">and</span> (<span class=\"built_in\">dump</span>[j] &lt;= <span class=\"number\">0x7e</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">                    binstr = binstr .. <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>( <span class=\"string\">\"%c\"</span>, <span class=\"built_in\">dump</span>[j] )</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    binstr = binstr .. <span class=\"string\">'.'</span></span><br><span class=\"line\">                <span class=\"keyword\">end</span></span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(binstr);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            binstr = binstr .. <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>( <span class=\"string\">\" %02x\"</span>, <span class=\"built_in\">dump</span>[i] )</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">\t<span class=\"comment\">-- 排除最后一行不超过16个的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">0</span> ~= ((#<span class=\"built_in\">dump</span>)%<span class=\"number\">16</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"keyword\">local</span> k = <span class=\"number\">16</span> - ((#<span class=\"built_in\">dump</span>) % <span class=\"number\">16</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j=<span class=\"number\">1</span>,k <span class=\"keyword\">do</span></span><br><span class=\"line\">            binstr = binstr .. <span class=\"string\">\"   \"</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">        binstr = binstr .. <span class=\"string\">\"  \"</span></span><br><span class=\"line\">        k = <span class=\"number\">16</span> - k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j=#<span class=\"built_in\">dump</span>-k+<span class=\"number\">1</span>, #<span class=\"built_in\">dump</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"number\">0x20</span> &lt;= <span class=\"built_in\">dump</span>[j]) <span class=\"keyword\">and</span> (<span class=\"built_in\">dump</span>[j] &lt;= <span class=\"number\">0x7e</span>) <span class=\"keyword\">then</span></span><br><span class=\"line\">                binstr = binstr .. <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>( <span class=\"string\">\"%c\"</span>, <span class=\"built_in\">dump</span>[j] )</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                binstr = binstr .. <span class=\"string\">'.'</span></span><br><span class=\"line\">            <span class=\"keyword\">end</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(binstr);</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">'------------------------------------------------------------------------'</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.char(arg) </code></strong>:将整型数字转成字符并连接</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">abcd</span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(<span class=\"number\">97</span>,<span class=\"number\">98</span>,<span class=\"number\">99</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">abc</span><br><span class=\"line\"><span class=\"comment\">-- 10输出不出来，这就是为啥上诉要排除小于等于0x20，大于0x7e的数</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.byte(arg[,int])</code></strong>:转换字符为整数值</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(<span class=\"string\">\"ABCD\"</span>,<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"number\">68</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(<span class=\"string\">\"ABCD\"</span>)</span><br><span class=\"line\"><span class=\"number\">65</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.gmatch (s, pattern)</code></strong></p>\n<p>回一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串。如果参数 pattern 描述的字符串没有找到，迭代函数返回nil。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> <span class=\"built_in\">string</span>.<span class=\"built_in\">gmatch</span>(<span class=\"string\">\"Hello Lua user\"</span>, <span class=\"string\">\"%a+\"</span>) <span class=\"keyword\">do</span> <span class=\"built_in\">print</span>(word) <span class=\"keyword\">end</span></span><br><span class=\"line\">Hello</span><br><span class=\"line\">Lua</span><br><span class=\"line\">user</span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.match (s, pattern [, init])</code></strong></p>\n<p>只寻找str中的第一个配对，参数init指定搜寻起点, 默认为1。</p>\n<p>返回值：</p>\n<ol><li><p>在成功配对时, 函数将返回配对表达式中的所有捕获结果;</p></li><li><p>如果没有设置捕获标记, 则返回整个配对字符串.</p></li><li><p>当没有成功的配对时, 返回nil</p></li></ol><figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; = <span class=\"built_in\">string</span>.<span class=\"built_in\">match</span>(<span class=\"string\">\"I have 2 questions for you.\"</span>, <span class=\"string\">\"%d+ %a+\"</span>)</span><br><span class=\"line\"><span class=\"number\">2</span> questions</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; = <span class=\"built_in\">string</span>.<span class=\"built_in\">format</span>(<span class=\"string\">\"%d, %q\"</span>, <span class=\"built_in\">string</span>.<span class=\"built_in\">match</span>(<span class=\"string\">\"I have 2 questions for you.\"</span>, <span class=\"string\">\"(%d+) (%a+)\"</span>))</span><br><span class=\"line\"><span class=\"number\">2</span>, <span class=\"string\">\"questions\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>string.pack (fmt, v1, v2, ···)</code></strong></p>\n<p><strong><code>string.packsize (fmt)</code></strong></p>\n<p><strong><code>string.unpack (fmt, s [, pos])</code></strong></p>\n<p><strong><code>string.dump (function [, strip])</code></strong></p>\n<h2 id=\"六、table（表）\">六、table（表）<a href=\"#六、table（表）\" title=\"六、table（表）\"></a></h2><p><strong>table相关函数：</strong></p>\n<p><strong><code>table.concat (table [, sep [, start [, end]]])</code></strong></p>\n<p>列出参数中指定table的数组部分从start位置到end位置的所有元素, 元素间以指定的分隔符(sep)隔开。如果 start  比 end大，返回空串。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fruits = {<span class=\"string\">\"banana\"</span>,<span class=\"string\">\"orange\"</span>,<span class=\"string\">\"apple\"</span>}</span><br><span class=\"line\"><span class=\"comment\">-- 返回 table 连接后的字符串</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"连接后的字符串 \"</span>,<span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(fruits))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 指定连接字符</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"连接后的字符串 \"</span>,<span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(fruits,<span class=\"string\">\", \"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 指定索引来连接 table</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"连接后的字符串 \"</span>,<span class=\"built_in\">table</span>.<span class=\"built_in\">concat</span>(fruits,<span class=\"string\">\", \"</span>, <span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">连接后的字符串     bananaorangeapple</span></span><br><span class=\"line\"><span class=\"string\">连接后的字符串     banana, orange, apple</span></span><br><span class=\"line\"><span class=\"string\">连接后的字符串     orange, apple</span></span><br><span class=\"line\"><span class=\"string\">--]]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>table.insert (table, [pos,] value)</code></strong></p>\n<p>在table的数组部分指定位置(pos)插入值为value的一个元素. pos参数可选, 默认为数组部分末尾:#table+1。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruits = {<span class=\"string\">\"banana\"</span>,<span class=\"string\">\"orange\"</span>,<span class=\"string\">\"apple\"</span>}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在末尾插入</span></span><br><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(fruits,<span class=\"string\">\"mango\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"索引为 4 的元素为 \"</span>,fruits[<span class=\"number\">4</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 在索引为 2 的键处插入</span></span><br><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(fruits,<span class=\"number\">2</span>,<span class=\"string\">\"grapes\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"索引为 2 的元素为 \"</span>,fruits[<span class=\"number\">2</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">索引为 4 的元素为     mango</span></span><br><span class=\"line\"><span class=\"string\">索引为 2 的元素为     grapes</span></span><br><span class=\"line\"><span class=\"string\">--]]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>table.maxn (table)</code></strong></p>\n<p>指定table中所有正数key值中最大的key值. 如果不存在key值为正数的元素, 则返回0。(Lua5.2之后该方法不存在)</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tbl = {[<span class=\"number\">1</span>] = <span class=\"number\">2</span>, [<span class=\"number\">2</span>] = <span class=\"number\">6</span>, [<span class=\"number\">3</span>] = <span class=\"number\">34</span>, [<span class=\"number\">26</span>] =<span class=\"number\">5</span>}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"tbl 最大值：\"</span>, table_maxn(tbl))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"tbl 长度 \"</span>, #tbl)</span><br><span class=\"line\"><span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">tbl 最大值：    34</span></span><br><span class=\"line\"><span class=\"string\">tbl 长度     3</span></span><br><span class=\"line\"><span class=\"string\">--]]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>table.remove (table [, pos])</code></strong></p>\n<p>返回table数组部分位于pos位置的元素. 其后的元素会被前移. pos参数可选, 默认为table长度, 即从最后一个元素删起。</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruits = {<span class=\"string\">\"banana\"</span>,<span class=\"string\">\"orange\"</span>,<span class=\"string\">\"apple\"</span>}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"最后一个元素为 \"</span>,fruits[<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">remove</span>(fruits)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"移除后最后一个元素为 \"</span>,fruits[<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">最后一个元素为     mango</span></span><br><span class=\"line\"><span class=\"string\">移除后最后一个元素为     nil</span></span><br><span class=\"line\"><span class=\"string\">--]]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p><strong><code>table.sort (table [, comp])</code></strong></p>\n<p>对给定的table进行升序排序。</p>\n<p>TODO1;comp</p>\n<figure class=\"highlight lua\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fruits = {<span class=\"string\">\"banana\"</span>,<span class=\"string\">\"orange\"</span>,<span class=\"string\">\"apple\"</span>,<span class=\"string\">\"grapes\"</span>}</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"排序前\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(fruits) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(k,v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">table</span>.<span class=\"built_in\">sort</span>(fruits)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"排序后\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> <span class=\"built_in\">ipairs</span>(fruits) <span class=\"keyword\">do</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(k,v)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">排序前</span></span><br><span class=\"line\"><span class=\"string\">1    banana</span></span><br><span class=\"line\"><span class=\"string\">2    orange</span></span><br><span class=\"line\"><span class=\"string\">3    apple</span></span><br><span class=\"line\"><span class=\"string\">4    grapes</span></span><br><span class=\"line\"><span class=\"string\">排序后</span></span><br><span class=\"line\"><span class=\"string\">1    apple</span></span><br><span class=\"line\"><span class=\"string\">2    banana</span></span><br><span class=\"line\"><span class=\"string\">3    grapes</span></span><br><span class=\"line\"><span class=\"string\">4    orange</span></span><br><span class=\"line\"><span class=\"string\">--]]</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"tablemove-a1-f-e-t-a2\"><code>table.move (a1, f, e, t [,a2])</code><a href=\"#tablemove-a1-f-e-t-a2\" title=\"table.move (a1, f, e, t [,a2])\"></a></h3><p>将元素从表 <code>a1</code> 移到表 <code>a2</code>。 这个函数做了次等价于后面这个多重赋值的等价操作： <code>a2[t],··· = a1[f],···,a1[e]</code>。 <code>a2</code> 的默认值为 <code>a1</code>。 目标区间可以和源区间重叠。 索引 <code>f</code> 必须是正数。</p>\n<h3 id=\"tablepack-···\"><code>table.pack (···)</code><a href=\"#tablepack-···\" title=\"table.pack (···)\"></a></h3><p>返回用所有参数以键 1,2, 等填充的新表， 并将 “<code>n</code>“ 这个域设为参数的总数。 注意这张返回的表不一定是一个序列。</p>\n<h3 id=\"tableunpack-list--i--j\"><code>table.unpack (list [, i [, j]])</code><a href=\"#tableunpack-list--i--j\" title=\"table.unpack (list [, i [, j]])\"></a></h3><p>返回列表中的元素。 这个函数等价于</p>\n<figure class=\"highlight plain\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return list[i], list[i+1], ···, list[j]</span><br></pre></td></tr></tbody></table></figure>\n\n<p><code>i</code> 默认为 1 ，<code>j</code> 默认为 <code>#list</code>。</p>\n<h2 id=\"七、function（函数）\">七、function（函数）<a href=\"#七、function（函数）\" title=\"七、function（函数）\"></a></h2><p>略</p>\n<h2 id=\"八、thread（线程）\">八、thread（线程）<a href=\"#八、thread（线程）\" title=\"八、thread（线程）\"></a></h2><p>略</p>\n<h2 id=\"九、userdata（用户数据）\">九、userdata（用户数据）<a href=\"#九、userdata（用户数据）\" title=\"九、userdata（用户数据）\"></a></h2><p>略</p>\n","next":{"title":"Lua语言基础","link":"2021/01/26/Lua语言基础"},"plink":"http://yoursite.com/2021/01/26/Lua语言基础2/"}